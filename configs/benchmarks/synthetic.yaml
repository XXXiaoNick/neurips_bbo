"""
Synthetic benchmark functions for black-box optimization.

This module implements two standard test functions used in optimization
research: Branin and Rosenbrock functions, which serve as baselines.
"""

import numpy as np
from ..base_benchmark import BaseBenchmark

class BraninBenchmark(BaseBenchmark):
    """
    Branin function benchmark for optimization.
    
    The Branin function is a common test function for optimization algorithms,
    with multiple local minima and three global minima.
    
    Mathematical form:
    f(x1,x2) = (x2 - 5.1/(4*pi^2)*x1^2 + 5/pi*x1 - 6)^2 + 10*(1-1/(8*pi))*cos(x1) + 10
    
    Domain: x₁ ∈ [-5, 10], x₂ ∈ [0, 15]
    Global minima: f(x*) ≈ 0.397887 at x* = (-π, 12.275), (π, 2.275), (9.42478, 2.475)
    """
    
    def __init__(self, **kwargs):
        """Initialize the Branin benchmark."""
        super().__init__(**kwargs)
        
    def _evaluate(self, x):
        """
        Evaluate the Branin function at point x.
        
        Args:
            x: A numpy array of shape (2,) containing the input coordinates
            
        Returns:
            The function value at x
        """
        x1, x2 = x
        
        a = 1
        b = 5.1 / (4 * np.pi**2)
        c = 5 / np.pi
        r = 6
        s = 10
        t = 1 / (8 * np.pi)
        
        term1 = a * (x2 - b * x1**2 + c * x1 - r)**2
        term2 = s * (1 - t) * np.cos(x1)
        term3 = s
        
        return term1 + term2 + term3


class RosenbrockBenchmark(BaseBenchmark):
    """
    Rosenbrock function benchmark for optimization.
    
    The Rosenbrock function, also known as the Valley or Banana function, 
    has a narrow, curved valley of low function values leading to the global minimum.
    It is a classic non-convex function used for testing optimization algorithms.
    
    Mathematical form:
    f(x) = sum_{i=1}^{d-1} [100*(x_{i+1} - x_i^2)^2 + (1 - x_i)^2]
    
    Domain: x_i ∈ [-5, 10] for all i
    Global minimum: f(x*) = 0 at x* = [1, 1, ..., 1]
    """
    
    def __init__(self, **kwargs):
        """Initialize the Rosenbrock benchmark."""
        super().__init__(**kwargs)
        
    def _evaluate(self, x):
        """
        Evaluate the Rosenbrock function at point x.
        
        Args:
            x: A numpy array of shape (d,) containing the input coordinates
            
        Returns:
            The function value at x
        """
        sum_value = 0
        for i in range(len(x) - 1):
            term1 = 100 * (x[i+1] - x[i]**2)**2
            term2 = (1 - x[i])**2
            sum_value += term1 + term2
            
        return sum_value


# Add noisy variants if needed
class BraninNoisyBenchmark(BraninBenchmark):
    """
    Noisy variant of the Branin function for testing robustness.
    
    Adds Gaussian noise to the standard Branin function.
    """
    
    def _evaluate(self, x):
        """
        Evaluate the noisy Branin function at point x.
        
        Args:
            x: A numpy array of shape (2,) containing the input coordinates
            
        Returns:
            The function value at x with added noise
        """
        # Get the standard Branin value
        value = super()._evaluate(x)
        
        # Add Gaussian noise if noise_std is greater than 0
        if hasattr(self, 'noise_std') and self.noise_std > 0:
            noise = np.random.normal(0, self.noise_std)
            value += noise
            
        return value